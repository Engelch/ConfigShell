#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
#
# TITLE:
#
# DESCRIPTION:
#
# CHANGELOG:
# - 0.0.1:
#
# COPYRIGHT Â© 2021 Christian Engel (mailto:engel-ch@outlook.com)
# Skeleton:
#   0.1.0 - improved exitIfErr
# LICENSE: MIT
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#########################################################################################
# VARIABLES

readonly _app=$(basename $0)
readonly _appDir=$(dirname $0)
readonly _absoluteAppDir=$(cd $_appDir; /bin/pwd)
readonly _appVersion="0.0.1" # use semantic versioning
export DebugFlag=${DebugFlag:-FALSE}
export VerboseFlag=${VerboseFlasg:-FALSE}

#########################################################################################
# ConfigShell lib 1.1 (codebase 1.0.0)
bashLib="/opt/ConfigShell/lib/bashlib.sh"
[ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
# shellcheck source=/opt/ConfigShell/lib/bashlib.sh
source "$bashLib"
unset bashLib
#########################################################################################

# MAIN ===============================================================================

function usage()
{
    err $_app
    err SYNOPSIS:
    err4 $_app '[-d|--debug] [-v|--verbose] [-f|--force] file...'
    err4 $_app '[-h|--help]'
    err DESCRIPTION: TODO
}

function parseCLI() {
    local _endLoop=
    local -i counter=0
    # have to call it 2x to get output and exit code. Else 'cmd -x' different to 'cmd -dx'
    getopt -o dvf -l debug,verbose,force -- $* &> /dev/null ; res=$?
    [ $res -ne 0 ] && usage && exit 1
    local cliLine=$(getopt -o dvf -l debug,verbose,force -- $*)
    for option in $cliLine; do
        counter=$(( $counter + 1 ))
        case "$option" in
        -d|--debug) debugSet; verboseSet; debug Debug and verbosity enabled.
                    debug cliLine $cliLine
                    ;;
        -v|--verbose) verboseSet; debug Verbose mode enabled.;;
        -f|--force) forcedMode=YES; debug Forced mode enabled.;;
        --) debug End of options reached. ; break 2 ;;
        *) errorExit 1 This should never happen. Option is $option.
        esac
    done
    debug counter $counter
    # remove $counter first words from cliLine
    cliLine=$(echo $cliLine | cut -f$(( $counter + 1))- -d ' ')
    debug new cliLine $cliLine
    cliLine=$(echo $cliLine | sed "s/\'//g" )
    debug new cliLine quotes removed $cliLine
    parseCLI_result=$cliLine
}

function fixGnupg() {
    # .gnupg is kept under ~/.ssh/gnupg so that backups are easier as one tarball
    if [ \( ! -L ~/.gnupg \) -a  -d ~/.gnupg ] ; then
        if [ -d ~/.ssh ] ; then
            if [ -d ~/.ssh/gnupg ] ; then
                errorExit 20 '~/.gnupg and ~/.ssh/gnupg are both existing directories. Please fix manually.'
            else
                mv ~/.gnupg ~/.ssh/gnupg
                ln -fs ~/.ssh/gnupg ~/.gnupg
            fi
        else
            mkdir ~/.ssh; chmod 700 ~/.ssh
            mv ~/.gnupg ~/.ssh/gnupg
            ln -fs ~/.ssh/gnupg ~/.gnupg
        fi
    else
        if [ -d ~/.ssh ] ; then
            [ ! -d ~/.ssh/gnupg ] && mkdir ~/.ssh/gnupg
        else
            mkdir -p ~/.ssh/gnupg ; chmod 700 ~/.ssh
        fi
        ln -fvs ~/.ssh/gnupg ~/.gnupg
    fi
}

# function oh-my-zsh() {
#     if [ ! -d $HOME/.oh-my-zsh ] ; then
#         echo -n 'Oh my ZSH is not installed. Shall it be installed? [Yynn]'
#         read a
#         [ "$a" = y -o "$a" = Y -o "$a" = "" ] && cd && git clone https://github.com/ohmyzsh/ohmyzsh.git .oh-my-zsh
#     fi
# }

function installFish() {
    declare -r fishCfgDir=~/.config/fish
    mkdir -p "$fishCfgDir" 2>/dev/null
    test -d  "$fishCfgDir" || errorExit 10 fish config directory "$fishCfgDir" could not be created
    test -d $_absoluteAppDir/fish || errorExit 11 fish config directory not found in ConfigShell
    cd "$fishCfgDir"
    for file in * ; do
        test -d "$file" && ! test -h "$file" && ! [[ "$file" =~ .*orig$ ]] && mv -v "$file" "$file.orig"
    done
    ln -sfv $_absoluteAppDir/fish/* .
}

function warningIfBinariesNotFound()       { for file in "$@"; do command -v "$file" &>/dev/null || 1>&2 echo "WARNING:binary not found:$file"; done }

function main() {
    exitIfBinariesNotFound pwd tput basename dirname mktemp
    parseCLI $* ; args=$parseCLI_result # args=$(parseCLI $*) creates a subshell and cannot set current shell debugFlag...
    debug args are $args
    cd  # jump to home directory, always install dot-files towards HOME directory
    #oh-my-zsh
    cd
    # if  $(diff -i $_appDir/dot.zshrc $_appDir/backup.zshrc) ; then
    #     echo restoring zshrc
    #     cp -fv $_appDir/backup.zshrc $_appDir/dot.zshrc
    # fi
    for file in $_absoluteAppDir/dot* ; do
        _nameWithoutDot=$(basename $file | sed 's/^dot//')
        [[ $_nameWithoutDot =~ .*~ ]] && continue
        ln -sfv $file $_nameWithoutDot
    done
    fixGnupg
    installFish
    warningIfBinariesNotFound ruby gnutls-cli openssl
}

main $*

# EOF
