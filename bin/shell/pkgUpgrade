#!/usr/bin/env bash
#
# shellcheck disable=SC2155
# no errors
#
# CHANGELOG
# 0.4
# - ITE reintroduced again to get nicer code
# - checking for kernel versions if Linux should be rebooted
#
# update OS supporting
# - Darwin alias OSX
# - Debian/Ubuntu
# - Fedora/RHEL

function err()          { echo "$*" 1>&2; return 0; }
function warning()      { err "WARNING:$*" ; return 0; }                                  # depends on err
function errorExit()    { EXITCODE=$1 ; shift; err "ERROR:$*" ; exit "${EXITCODE}"; }    # depends on err

declare -r version=0.4.1
_uname=$(uname)
declare -r touchFile="$HOME/.pkgU" 

function osxUpgrade() {
   echo homebrew....................................................................  1>&2
   brew update && brew upgrade "$ForceInstall" && brew upgrade "$ForceInstall" --cask --greedy && \
      brew autoremove && \
      brew cleanup # casks are also updated to today's brew upgrade && brew cu -ay # cu := cask upgrade
   echo Google Cloud SDK....................................................................  1>&2
   if command -v gcloud > /dev/null 2>&1 ;then
      currentGCPSDK=$(gcloud components list 2>&1 | \
         grep -E 'Your current Cloud SDK version' | awk '{ print $NF }')
      availableGCPSDK=$(gcloud components list 2>&1 | \
         grep -E 'The latest available version' | awk '{ print $NF }')
      echo Installed version of GCP SDK: "$currentGCPSDK", available version: "$availableGCPSDK"
      [ ! "$currentGCPSDK" = "$availableGCPSDK" ] && sudo CLOUDSDK_PYTHON=python3.8 gcloud components update
      [ "$currentGCPSDK" = "$availableGCPSDK" ] && echo No GCP SDK update found.
   else
      warning gcloud does not seem to be installed ;
   fi
   echo macTeX.................................................................... 1>&2
   if command -v tlmgr > /dev/null 2>&1 ; then tlmgr --self --all update
   else warning mactex does not seem to be installed ;fi
}

function debianUpgrade() {
   sudo apt-get update && \
      sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade && \
      sudo apt-get autoremove
   if [ -f /run/reboot-required ] ; then 
      echo "reboot is REQUIRED!"
   else
      echo NO reboot required.
   fi
}

function checkIfActualKernelAndLibc() {
   installedKernelVersion=$(rpm -q kernel | tail -n1 | sed -e 's/kernel-//' -e 's/-.*//')
   runningKernelVersion=$(uname -r | sed -e 's/kernel-//' -e 's/-.*//') # substituting kernel not required, but no harm
   if [ "$installedKernelVersion" = "$runningKernelVersion" ] ; then
      echo kernel NO reboot required.
   else
      echo "kernel reboot is REQUIRED!"
   fi
   [ -e /var/log/boot.log ] && [ -e /lib64/libc.so ] && \
      if [ /lib64/libc.so -nt /var/log/boot.log ] ; then 
         echo "lib64/libc reboot is REQUIRED!"
      else
         echo "lib64/libc NO reboot required."
      fi
   [ -e /var/log/boot.log ] && [ -e /lib/libc.so ] && \
      if [ /lib/libc.so -nt /var/log/boot.log ] ; then 
         echo "lib/libc reboot is REQUIRED!"
      else
         echo "lib/libc NO reboot required."
      fi
}

function dnfUpgrade() {
   sudo dnf -y upgrade && sudo dnf -y clean packages
}

function yumUpgrade() {
   sudo yum -y update && sudo yum -y clean packages
}

function main() {
   if [ "$1" = '-V' ] || [ "$1" = '--version' ] ; then
      echo $version
      exit 0
   fi
   if [ "$1" = '-f' ] || [ "$1" = '--force' ] ; then
      declare -rg ForceInstall='--force'
   fi
   [ -d /opt/ConfigShell/. ] && ( cd /opt/ConfigShell || errorExit 10 "Could not jump to ConfigShell" ; echo ConfigShell Upgrade... ;  git pull )
   if [[ ${_uname} == Darwin ]] ; then
      echo OSX Homebrew Upgrade...
      osxUpgrade
   elif [[ ${_uname} == Linux ]] ; then
         if [ -e /etc/debian_version ] ; then
            echo Debian Upgrade...
            debianUpgrade
         elif command -v dnf &>/dev/null ; then
            echo Fedora DNF Upgrade...
            dnfUpgrade
            checkIfActualKernelAndLibc
         elif command -v yum &>/dev/null ; then
            echo RedHat YUM Upgrade...
            yumUpgrade
            checkIfActualKernelAndLibc
         else
            errorExit 1 unsupported Linux
         fi
   else
      errorExit 1 unsupported OS
   fi
   touch "$touchFile"
}

main "$@"

# EOF
