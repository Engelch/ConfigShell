#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
# shellcheck disable=SC2155
#
# TITLE: $_app
#
# DESCRIPTION: <see usage function below>
#
# LICENSE: MIT Â© 2023 developed by engel-ch@outlook.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

function loadLibs() {
    #########################################################################################
    # ConfigShell lib 1.1 (codebase 1.0.0)
    bashLib="/opt/ConfigShell/lib/bashlib.sh"
    [ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
    # shellcheck source=/opt/ConfigShell/lib/bashlib.sh
    source "$bashLib"
}

function usage()
{
    1>&2 cat <<HERE
NAME
    $_app

SYNOPSIS
    $_app [-D] [dir...]
    $_app [-V]
    $_app -h

VERSION
    $_appVersion

DESCRIPTION
    Convert a markdown file to PDF using pandoc. This version works more stable when using
    classical LaTeX instead of xelatex. The starting position is: The markdown file can be 
    formatted by itself and is 'good looking'. No LaTeX commands are included. But:
    Elements of the source markdown file before the comment 

        [//]: # (delete before 4 LaTeX)

    will be deleted when processing using pandoc. Additionally, if a file header_tex.yaml 
    exists, this file is prepended to the stripped markdown file. Furthermore, a file named
    footer_tex.tex is appended for pandoc processing if it exists. 
    Usually, the header file contains a LaTeX title and a table of contents declaration which
    will end up in better looking LaTeX/PDF version. The names of the header and footer files
    can be changed for CLI options. A local headerfile overwrites a default headerfile.

    Further options can be passed to the pandoc command using the environment
    variable PANDOC_OPTIONS. This environment variable is not double-quoted, so it can contain
    multiple options.
OPTIONS
    -H <<file>> ::= optional headerfile with YAML, LaTeX commands,
                    default: 
                        1. use ./header_tex.yaml if existing
                        2. use /opt/ConfigShell/share/Markdown-Document/header_tex.yaml else
                    If you don't want to have a header file, you can specify -H /dev/null
    -F <<file>> ::= append the markdown file with the following LaTeX file if the file exists.
                    default: footer_tex.tex
    -D          ::= enable debug output
    -V          ::= output the version number to stderr and exit with 0
    -x          ::= disable LaTeX processing. This is useful if the markdown file shall be 
                    formatted to look nice in LaTeX. 
                    LaTeX formatting is disabled by default. This has the following effect:
                        1. All lines before the comment [//]: # (delete before 4 LaTeX)
                           are removed.
                        1. Only one section (#) is allowed which
                           is removed by the title specified in the LaTeX header file.
                        2. All other sections below (e.g. subsection (##))
                           will be moved one level up.
    -h          ::= show usage message to stderr and exit with 0
HERE
}

function parseCLI() {
    while getopts "DVhH:F:kx" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  1>&2 echo Debug enabled ; DebugFlag="TRUE"
                ;;
            V)  1>&2 echo $_appVersion
                exit 0
                ;;
            h)  usage ; exit 0
                ;;
            k)  keepTemporaryFiles=TRUE
                ;;
            H)  headerFileUser=${OPTARG}
                ;;
            F)  footerFile=${OPTARG}
                ;;
            x)  disableLaTeXProcessing=TRUE
                ;;
            # v)  verbose=TRUE
            #     ;;
            *)
                1>&2 echo "Help with $_app -h"
                exit 1  # Exit abnormally.
                ;;
        esac
    done
}

# doLaTeXProcessing 
# PRE: delete before 4 LaTeX has been processed
# ARG:
#   1) header filename
#   2) markdown file (stripped by before 4 LaTeX comment)
#   3) footer filename
#   4) output filename
#   5) TMP2
#   6) TMP3
# EXIT 21, 
function doLaTeXProcessing() {
    readonly _header="$1"
    readonly _processedMarkdownFile="$2"
    readonly _footer="$3"
    readonly _output="$4"
    readonly _tmp2="$TMP2"
    readonly _tmp3="$TMP3"

    # stop if file contains more than one section (#)
    [ "$(grep -E -c '^# ' "$_processedMarkdownFile")" -gt 0 ] && errorExit 21 "No section is supposed to exist"
  
    # remove the section alias title from the file
    # sed -e '/^# /d' "$2" > "$3"
    # move subsections to sections
    sed -e 's/^## /# /' "$_processedMarkdownFile" > "$_tmp2"
    # move subsubsections to subsections
    sed -e 's/^### /## /' "$_tmp2" > "$_tmp3"
    # move subsubsubsections to subsubsections
    sed -e 's/^#### /### /' "$_tmp3" > "$_tmp2"
    # move subsubsubsubsections to subsubsubsections
    sed -e 's/^##### /#### /' "$_tmp2" > "$_tmp3"
    # move TeX formatting - does not work on OSX
    sed -e 's/\bTeX\b/\\TeX\{\}/g' "$_tmp3" > "$_tmp2"
    # move LaTeX formatting
    sed -e 's/LaTeX/\\LaTeX\{\}/g' "$_tmp2" > "$_tmp3"
    cp "$_tmp3" "$_processedMarkdownFile"   # keep the next line constant, independent from the number of conversion steps
    [ -n "$keepTemporaryFiles" ] && err "creating latexPreparedMarkdown.txt" && cp "$_processedMarkdownFile" "latexPreparedMarkdown.txt"
    debug cat "$_header" "$_processedMarkdownFile" "$_footer" \| pandoc $PANDOC_OPTIONS -f markdown -t pdf -o "$_output" 
    cat "$_header" "$_processedMarkdownFile" "$_footer" | pandoc $PANDOC_OPTIONS -f markdown -t pdf -o "$_output" 
}

function setHeaderfile() {
    declare  headerFileUser=""                       # user overwrite
    declare  headerFileStd="/opt/ConfigShell/share/Markdown-Document/header_tex.yaml" # default
    if [ -n "$headerFileUser" ] ; then
        [ ! -f "$headerFileUser" ] && errorExit 10 specified header file not found
        HEADER_TEXT="$headerFileUser"
        debug "using user specified headerfile $headerFileUser"
    else
        if [ -f "$(basename "$headerFileStd")" ] ; then 
            HEADER_TEXT="$(basename "$headerFileStd")" && echo using local headerfile
        else
            HEADER_TEXT="$headerFileStd"
            debug using system specified headerfile
        fi
    fi
    [ ! -r "$HEADER_TEXT" ] && errorExit 11 "specified header file not readable: $HEADER_TEXT"
    debug "header file set to $HEADER_TEXT"
}

function main() {
    declare -r _app=$(basename "${0}")
    declare -r _appDir=$(dirname "$0")
    declare -r _absoluteAppDir=$(cd "$_appDir" || exit 99 ; /bin/pwd)
    declare -r _appVersion="1.2.0"      # use semantic versioning
    declare keepTemporaryFiles=''

    declare footerFile="footer_tex.tex"
    export DebugFlag=${DebugFlag:-FALSE}

    parseCLI "$@"               # cannot use fn-s from loadLibs
    shift "$(( OPTIND - 1 ))"   # not working inside parseCLI

    loadLibs
    exitIfBinariesNotFound mktemp awk pandoc sed   # exit if required apps not found

    # simplification for completions: also allow to specify the input file as
    # inputFilename. instead of inputFilename.md. In both cases, the input
    # filename will we inputFilename.md
    inputFile="$(dirname "$1")/$(basename "$1" md)"md
    exitIfPlainFilesNotExisting "$inputFile"
    debug inputFile: "$inputFile"

     # 2 step outputFile(name) creation so that the script can also be called in shortform like
    #  md2pdf README. 
    # and still producing README.pdf. This is a simplification in auto-completion environments.
    outputFile="$(basename "$inputFile" .md)"       # remove potential suffix .md
    outputFile="$(basename "$outputFile" .)".pdf    # remove pontential suffix . AND add .pdf now 
    debug "outputFile set to $outputFile"

    # create 3 temporary files and delete them at the end of the run. 
    # The last2 are used by the doLaTeXProcessing function.
    TMP1=$(tempFile) 
    TMP2=$(tempFile) 
    TMP3=$(tempFile)
    trap "/bin/rm -f $TMP1 $TMP2 $TMP3" EXIT

    #[ "$DebugFlag" = TRUE ] && cat $HEADER_TEXT "$TMP1" $FOOTER_TEXT >| temp.md
    #    cat $HEADER_TEXT "$TMP1" $FOOTER_TEXT | pandoc $PANDOC_OPTIONS -f markdown -t pdf -o "$outputFile" 
    if [ -n "$disableLaTeXProcessing" ] ; then
        sed 's/delete before 4 LaTeX.*//' < "$inputFile" > "$TMP1"
        [ -n "$keepTemporaryFiles" ] && err "creating headerRemovedFile.txt" && cp "$TMP1" "headerRemovedFile.txt"
        pandoc $PANDOC_OPTIONS -f markdown -t pdf -o "$outputFile" < "$TMP1"
    else
        # header and footer files are only used in LaTeX mode
        HEADER_TEXT=
        setHeaderfile

        FOOTER_TEXT=
        [ -f "$footerFile" ] && FOOTER_TEXT="$footerFile" && debug "footer-file set to $footerFile"
        [ ! -f "$footerFile" ] && FOOTER_TEXT="/dev/null" && debug "footer-file set to /dev/null"

        debug "do LaTeX preparation - delete start of Mardown file"  # file to continue with will be referenced by $TMP1
        if [ "$(grep -c 'delete before 4 LaTeX' "$inputFile")" -gt 0 ] ; then
            debug stripping Markdown file for LaTeX Header
            awk '/delete before 4 LaTeX/ { found = 1; next } found { print }' < "$inputFile" > "$TMP1" 
        else
            cp "$inputFile" "$TMP1"
            debug no LaTeX comment found. Keeping original markdown file.
        fi
        [ -n "$keepTemporaryFiles" ] && err "creating headerRemovedFile.txt" && cp "$TMP1" "headerRemovedFile.txt"
        debug start the pandoc process

        # last 2 TMP2, TMP3 are temporary files for the doLaTeXProcessing. As these files are to be deleted
        # after the processing, the file references are created here and passed to the function.
        doLaTeXProcessing "$HEADER_TEXT" "$TMP1" "$FOOTER_TEXT" "$outputFile" "$TMP2" "$TMP3"
    fi
}

main "$@"

# EOF
