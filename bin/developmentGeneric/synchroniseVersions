#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
# shellcheck disable=SC2155
#
# TITLE: $_app
#
# DESCRIPTION: <see usage function below>
#
# LICENSE: MIT todo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

#########################################################################################
# ConfigShell lib 1.1 (codebase 1.0.0)
bashLib="/opt/ConfigShell/lib/bashlib.sh"
[ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
# shellcheck source=/opt/ConfigShell/lib/bashlib.sh
source "$bashLib"
unset bashLib

# application-specific functions  ===============================================================================

function usage()
{
    cat << HERE
${_app} [ -c <<cfgFile>> ]
${_app} -V
${_app} (-h | --help)

The command requires a file synchroniseVersions.cfg in the current directory. The file specifies directories
with contain applications. For each application, this app shows the current version. Then it asks for a new version
to be input by the user. This new version number is set to all the applications specified.

The command helps to synchronise Kubernetes roll-outs. The goal is that each pod of a deployment has the same
version number.

-V ::= output the version and exit 1
-h ::= output help and exit 2
HERE
}

# EXIT 1    version
# EXIT 2    usage
# EXIT 3    unknown option
function parseCLI() {
    while getopts "DVc:h" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  debugSet
                debug "Debug enabled."
                ;;
            V)  echo "$_appVersion"
                exit 1
                ;;
            c)  configFile="${OPTARG}"
                debug setting configuration file to "$configFile"
                ;;
            h)  usage
                exit 2
                ;;
            *)  err Help with "$_app" -h
                exit 3
                ;;
        esac
    done
}

function main() {
    declare -r _app=$(basename "${0}")
    declare -r _appDir=$(dirname "$0")
    declare -r _absoluteAppDir=$(cd "$_appDir" || exit 99 ; /bin/pwd)
    declare -r _appVersion="0.1.0"      # use semantic versioning
    declare -g configFile="./synchroniseVersions.cfg"
    export DebugFlag=${DebugFlag:-FALSE}

    exitIfBinariesNotFound pwd basename dirname mktemp version.sh
    parseCLI "$@"
    shift "$(( OPTIND - 1 ))"  # not working inside parseCLI

    exitIfPlainFilesNotExisting "$configFile"   # to be done after parseCLI

    ##### output the version information from every specified directory in $configFile
    for dir in $(grep -v '^$' < "$configFile" | grep -v '^#') ; do
        (
            if [ -d "$dir" ] ; then
                echo -n "$dir "
                cd "$dir" || exit 99
                version.sh
            else
                error "$dir" is no directory
            fi
        )
    done
    ######### ask the user for a new version for all specified prjs in $configFile
    read -r -e -p 'New common version number: ' newVersion
    ######## apply the specified new version to all prjs specified in $configFile
    for dir in $(grep -v '^$' < "$configFile" | grep -v '^#') ; do
        (
            cd "$dir" || exit 99
            bumpversion --allow-dirty --current-version "$(version.sh)" --new-version "$newVersion" major "$(version.sh -v | cut -d: -f1)"
        )
    done
}

main "$@"

# EOF
