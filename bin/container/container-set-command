#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
# shellcheck disable=SC2155
#
# TITLE: $_app
#
# DESCRIPTION: <see usage function below>
#
# LICENSE: MIT todo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

function usage()
{
    1>&2 cat <<HERE
NAME
    $_app
SYNOPSIS
    $_app [-D] [dir...]
    $_app [-V]
    $_app -h
VERSION
    $_appVersion
DESCRIPTION
    Some systems use docker, other systems use podman. Some hosts even install both tools
    in parallel. Previous (--b2309) versions implemented a preference for podman. If
    podman is installed, the use it. This command begins to change this model. All
    container-build-* and other container-* commands will now run the script ~/bin/container.
    
    1. If the ~/bin directory is not existing, it is created by this command. 
    2. If ~/bin/container is already existing, then command does nothing.
    3. If no ~/bin/container is existing, then it checks
        a. if only one of the container commands is installed. Then, this container command is
           linked to ~/bin/container. 
        b. If both commands exist, the user is asked for a decision if
           both podman and docker are available. 
    4. So, a user can simply change the container toolchain by changing
       ~/bin/container to point to docker, podman, or even something else. This also
       enables the possibility to start with a shell script that for example shows all commands
       to stdout/stderr or does something completely different.

OPTIONS
    -D      ::= enable debug output, also enables verbose mode
    -V      ::= output the version number to stderr and exit with 0
    -f      ::= force a new s-link to be created, or delete the existing one at least
    -h      ::= show usage message to stderr and exit with 0
    -v      ::= show the decisions during execution
HERE
}

function loadLibs() {
    #########################################################################################
    # ConfigShell lib 1.1 (codebase 1.0.0)
    bashLib="/opt/ConfigShell/lib/bashlib.sh"
    [ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
    # shellcheck source=/opt/ConfigShell/lib/bashlib.sh
    source "$bashLib"
}

function parseCLI() {
    declare -g verbose
    declare -g forcedMode
    while getopts "DVfhv" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  1>&2 echo Debug enabled ; DebugFlag="TRUE"
                verbose="TRUE"
                ;;
            V)  1>&2 echo $_appVersion
                exit 0
                ;;
            f)  forcedMode=TRUE
                ;;
            h)  usage ; exit 0
                ;;
            v)  verbose=TRUE
                ;;
            *)
                1>&2 echo "Help with $_app -h"
                exit 1  # Exit abnormally.
                ;;
        esac
    done
}

function verbose() {
    [ "$verbose" = TRUE ] && echo "$*"
    return 0 
}

# allCommandsInPath return with 0 if all specified arguments (binaries) exist. Otherwise, return 1.
# A potential candidate for the library?
function allCommandsInPath() {
    for cmd in "$@" ; do 
        command -v "$cmd" &> /dev/null || return 1
    done
    return 0
}

# docker and podman were found, ask the user which tool to use
function askUserWhichContainerToolsToUse() {
    select prog in docker podman ; do 
        case "$prog" in
        docker)     createLinkToContainerCmdAndExit docker
                    ;;
        podman)     createLinkToContainerCmdAndExit podman
                    ;;
        *)          echo unknown command, please try again or press control-c
                    ;;
        esac
    done
}

function createLinkToContainerCmdAndExit() {
    verbose creating link for "$1"
    echo 'You might have to reload your shell (rl) so that the changes are effective'
    ln -s "$(which "$1")" "$HOME/bin/container"
    exit $?
}

function main() {
    # Variables
    declare -r _app=$(basename "${0}")
    declare -r _appDir=$(dirname "$0")
    declare -r _absoluteAppDir=$(cd "$_appDir" || exit 99 ; /bin/pwd)
    declare -r _appVersion="0.0.1"      # use semantic versioning
    export DebugFlag=${DebugFlag:-FALSE}

    parseCLI "$@"               # cannot use fn-s from loadLibs
    shift "$(( OPTIND - 1 ))"   # not working inside parseCLI

    loadLibs

    debug args are "$*"
    debug Passed all setup, now working on the semantics of this script
    if [ ! -d "$HOME/bin" ] ; then
        verbose creating "$HOME/bin"
        mkdir "$HOME/bin" || errorExit 10 in creating "$HOME/bin"
    fi
    # The next 2 command line are position-dependent
    [ -f "$HOME/bin/container" ] && [ "$forcedMode" = TRUE ] && verbose deleting existing bin/container && /bin/rm -f "$HOME/bin/container"
    [ -f "$HOME/bin/container" ] && verbose "container binary existing ($(readlink "$HOME/bin/container"))", no change, exiting. && exit 0
    allCommandsInPath docker podman && askUserWhichContainerToolsToUse && exit $?
    if allCommandsInPath docker ; then
        createLinkToContainerCmdAndExit docker
    elif allCommandsInPath podman ; then
        createLinkToContainerCmdAndExit podman
    else 
        err No container building tool found
        exit 1
    fi
}

main "$@"

# EOF
