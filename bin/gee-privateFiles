#!/usr/bin/env bash
# To enable this hook, rename this file to ".git/hooks/pre-commit".
# Copyright Â© 2021 engel-ch@outlook.com
# License: MIT
# CHANGELOG
# 1.0.0
# - check and load file file_dependencies.lst

readonly _app=$(basename $0)
readonly _appDir=$(dirname $0)
readonly _absoluteAppDir=$(cd $_appDir; /bin/pwd)
readonly _appVersion="1.0.3" # use semantic versioning
export DebugFlag=${DebugFlag:-FALSE}

#########################################################################################
# SKELETON FUNCTIONS, considered R/O, v0.4.1 excerpt

# so helps to write a message in reverse mode
function so()
# always show such a message.  If known terminal, print the message
# in reverse video mode. This is the other way, not using escape sequences
{
   [ "$1" != on -a "$1" != off ] && return 
    if [ "$TERM" = xterm -o "$TERM" = vt100 -o "$TERM" = xterm-256color  -o "$TERM" = screen ] ; then
      [ "$1" = on ] && tput smso 
      [ "$1" = off ] && tput rmso
    fi
}

# --- debug: Conditional debugging. All commands begin w/ debug.

function debugSet()             { DebugFlag=TRUE; return 0; }
function debugUnset()           { DebugFlag=; return 0; }
function debugExecIfDebug()     { [ "$DebugFlag" = TRUE ] && $*; return 0; }
function debug()                { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:'$* 1>&2 ; return 0; }
function debug4()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:    ' $* 1>&2 ; return 0; }
function debug8()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:        ' $* 1>&2 ; return 0; }
function debug12()              { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:            ' $* 1>&2 ; return 0; }

# --- Exits

# function error()        { err 'ERROR:' $*; return 0; } # similar to err but with ERROR prefix and possibility to include 
# Write an error message to stderr. We cannot use err here as the spaces would be removed.
function error()        { so on; echo 'ERROR:'$* 1>&2;            so off ; return 0; }
function error4()       { so on; echo 'ERROR:    '$* 1>&2;        so off ; return 0; }
function error8()       { so on; echo 'ERROR:        '$* 1>&2;    so off ; return 0; }
function error12()      { so on; echo 'ERROR:            '$* 1>&2;so off ; return 0; }

function warning()      { so on; echo 'WARNING:'$* 1>&2;          so off; return 0; }


function errorExit()    { EXITCODE=$1 ; shift; error $* ; exit $EXITCODE; }
function exitIfErr()    { a="$1"; b="$2"; shift; shift; [ "$a" -ne 0 ] && errorExit $b App returned $b $*; }

function err()          { echo $* 1>&2; }                 # just write to stderr
function err4()         { echo '   ' $* 1>&2; }           # just write to stderr
function err8()         { echo '       ' $* 1>&2; }       # just write to stderr
function err12()        { echo '           ' $* 1>&2; }   # just write to stderr

# --- Existance checks
function exitIfBinariesNotFound()       { for file in $@; do [ $(command -v "$file") ] || errorExit 253 binary not found: $file; done }
function exitIfPlainFilesNotExisting()  { for file in $*; do [ ! -f $file ] && errorExit 254 'plain file not found:'$file 1>&2; done }
function exitIfFilesNotExisting()       { for file in $*; do [ ! -e $file ] && errorExit 255 'file not found:'$file 1>&2; done }
function exitIfDirsNotExisting()        { for dir in $*; do [ ! -d $dir ] && errorExit 252 "$APP:ERROR:directory not found:"$dir; done }

# --- Temporary file/directory  creation
# -- file creation -- TMP1=$(tempFile); TMP2=$(tempFile) ;;;; trap "rm -f $TMP1 $TMP2" EXIT
# -- directory creation -- TMPDIR=$(tempDir) ;;;;;  trap "rm -fr $TMPDIR;" EXIT
#
function tempFile()                     { mktemp ${TMPDIR:-/tmp/}$_app.XXXXXXXX; }
function tempDir()                      { mktemp -d "${TMPDIR:-/tmp/}$_app.YYYYYYYYY"; }
# realpath as shell, argument either supplied as stdin or as $1

# application-specific functions  ===============================================================================

function findGeeCfgFiles() {
   debug findGeeCfgFiles...........
   readonly nl=''
   local _files=$(find $1 -type f -name gee.cfg)
   [[ ! "$_files" =~ .gee* ]] && errorExit 10 pre-commit hook installed but no gee.cfg files
   debug4 _files:$_files
   echo $_files
   return 0
}

function determineToBeEncryptedFiles() {
   debug determineToBeEncryptedFiles $* ..........
   out=
   for geeFile in $* ; do
      debug4 working on $geeFile
      for entry in $(cat $geeFile | egrep -v '^[[:space:]]*#' | egrep -v '^$') ; do
         debug8 entry $entry
         out="$out $(find $(dirname $geeFile)/ -name $entry -type f -print)"
      done
   done
   debug4 collected output is $out
   echo $out
   return 0
}

function showFile() {
   debug showFile .............. $*
   _quiet=$1
   _mode=$2
   case $_mode in
   all)     debug4 showFile all mode
            [ $_quiet = TRUE ] && echo $file && return 0
            [ $(egrep '^\$ANSIBLE_VAULT;.*;AES256(;.*)?$' $file | wc -l) -eq 0 ] && echo $file unencrypted && return 0
            echo $file encrypted $(egrep '^\$ANSIBLE_VAULT;.*;AES256(;.*)?$' $file | sed -e 's/.*;//')
            ;;
   decrypt) debug4 showFile decrypted private files only
            [ $(egrep '^\$ANSIBLE_VAULT;.*;AES256(;.*)?$' $file | wc -l) -eq 0 ] && echo $file
            ;;
   encrypt) debug4 showFile decrypted private files only
            [ $(egrep '^\$ANSIBLE_VAULT;.*;AES256(;.*)?$' $file | wc -l) -eq 0 ] || echo $file 
            ;;
   *)       error 40 This should not happen, undefined mode in showFile $_mode
            ;;
   esac
   return 0
}

function listPrivateFiles() {
   debug listPrivateFiles $* ...............
   _quiet=$1
   _mode=$2
   shift ; shift
   for file in $* ; do
      showFile $_quiet $_mode $file
   done
   return 0
}

# The command works as expected
#     git rev-parse --show-toplevel # show top-level directory which is under git

function usage()
{
    err DESCRIPTION
    err4 list the files matched by gee.cfg files to be encrypted. By default,
    err4 all private files are listed.
    err
    err SYNOPSIS
    err4 $_app '[-d] [-q]'
    err4 $_app '[-d] -u'
    err4 $_app '[-d] -e|-p'
    err4 $_app '-h'
    err
    err VERSION
    err4 $_appVersion
    err
    err OPTIONS
    err4 '-e      ::= list encrypted, private files'
    err4 '-p      ::= as -e'
    err4 '-u      ::= list unencrypted, private files'
    err
    err4 '-d      ::= enable debug output'
    err4 '-h      ::= show usage message and exit with exit code 1'
    err4 '-q      ::= list files without encryption-status'
}


function parseCLI() {
    while getopts "dhquep" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            d)    err Debug enabled ; debugSet     
                  ;;
            q)    debug quiet mode; _quiet=TRUE
                  ;;
            u)    debug decrypted files only
                  _mode=decrypt
                  ;;
            e|p)  debug encrypted files only
                  _mode=encrypt
                  ;;
            h)    usage ; exit 1
                  ;;
            *)
                err Help with $_app -h
                exit 2  # Exit abnormally.
                ;;
        esac
    done
    [ ! -z "$_mode" -a "$_quiet" = TRUE ] && error Mode $_mode and quiet mode cannot be defined together && return 10
    [ -z "$_mode" ] && _mode=all
    return 0
}

function main() {
   exitIfBinariesNotFound egrep find ansible-vault dirname wc
   _quiet=FALSE
   set -e   # exit if some exit/return code is -ne 0
   parseCLI $*
   debug Mode is $_mode
   _rootGitDir=$(git rev-parse --show-toplevel)
   debug GitRootDir is $_rootGitDir

   cfgs=$(findGeeCfgFiles $_rootGitDir)
   debug cfgs: $cfgs
   privateFiles=$(determineToBeEncryptedFiles $cfgs)
   listPrivateFiles $_quiet $_mode $privateFiles
}

main $@

### EOF
