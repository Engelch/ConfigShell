#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
# shellcheck disable=SC2155
#
# TITLE: $_app
#
# DESCRIPTION: <see usage function below>
#
# LICENSE: MIT todo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

#########################################################################################
# VARIABLES, CONSTANTS

#########################################################################################

# --- debug: Conditional debugging. All commands begin w/ debug.

function debugSet()             { DebugFlag=TRUE; return 0; }
function debugUnset()           { DebugFlag=; return 0; }
function debugExecIfDebug()     { [ "$DebugFlag" = TRUE ] && "$*"; return 0; }
function debug()                { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:'"$*" 1>&2 ; return 0; }
function debug4()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:    ' "$*" 1>&2 ; return 0; }
function debug8()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:        ' "$*" 1>&2 ; return 0; }
function debug12()              { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:            ' "$*" 1>&2 ; return 0; }

# --- Exits

# function error()        { err 'ERROR:' $*; return 0; } # similar to err but with ERROR prefix and possibility to include
# Write an error message to stderr. We cannot use err here as the spaces would be removed.
function error()        { echo 'ERROR:'"$*" 1>&2;             return 0; }
function error4()       { echo 'ERROR:    '"$*" 1>&2;         return 0; }
function error8()       { echo 'ERROR:        '"$*" 1>&2;     return 0; }
function error12()      { echo 'ERROR:            '"$*" 1>&2; return 0; }

function errorExit()    { EXITCODE="$1" ; shift; error "$*" ; exit "$EXITCODE"; }
function exitIfErr()    { a="$1"; b="$2"; shift; shift; [ "$a" -ne 0 ] && errorExit "$b" App returned "$a" "$*"; }

function err()          { echo "$*" 1>&2; }                 # just write to stderr
function err4()         { echo '   ' "$*" 1>&2; }           # just write to stderr
function err8()         { echo '       ' "$*" 1>&2; }       # just write to stderr
function err12()        { echo '           ' "$*" 1>&2; }   # just write to stderr

# --- Existance checks
function exitIfBinariesNotFound()       { for file in "$@"; do command -v "$file" &>/dev/null|| errorExit 253 binary not found: "$file" ; done }
function exitIfPlainFilesNotExisting()  { for file in "$@"; do [ ! -f "$file" ] && errorExit 254 'plain file not found:'"$file" 1>&2; done }
function exitIfFilesNotExisting()       { for file in "$@"; do [ ! -e "$file" ] && errorExit 255 'file not found:'"$file" 1>&2; done }
function exitIfDirsNotExisting()        { for dir in "$@"; do [ ! -d "$dir" ] && errorExit 252 "$APP:ERROR:directory not found:$dir"; done }

# --- Temporary file/directory  creation
# -- file creation -- TMP1=$(tempFile); TMP2=$(tempFile) ;;;; trap "rm -f $TMP1 $TMP2" EXIT
# -- directory creation -- TMPDIR=$(tempDir) ;;;;;  trap "rm -fr $TMPDIR;" EXIT
#
function tempFile()                     { mktemp "${TMPDIR:-/tmp/}$_app.XXXXXXXX"; }
function tempDir()                      { mktemp -d "${TMPDIR:-/tmp/}$_app.YYYYYYYYY"; }
# realpath as shell, argument either supplied as stdin or as $1

# application-specific functions  ===============================================================================

function usage()
{
    cat << HERE
${_app} [ -c <<cfgFile>> ]
${_app} -V
${_app} (-h | --help)

The command requires a file synchroniseVersions.cfg in the current directory. The file specifies directories
with contain applications. For each application, this app shows the current version. Then it asks for a new version
to be input by the user. This new version number is set to all the applications specified.

The command helps to synchronise Kubernetes roll-outs. The goal is that each pod of a deployment has the same
version number.

-V ::= output the version and exit 1
-h ::= output help and exit 2
HERE
}

# EXIT 1    version
# EXIT 2    usage
# EXIT 3    unknown option
function parseCLI() {
    while getopts "DVc:h" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  debugSet
                debug "Debug enabled."
                ;;
            V)  echo "$_appVersion"
                exit 1
                ;;
            c)  configFile="${OPTARG}"
                debug setting configuration file to "$configFile"
                ;;
            h)  usage
                exit 2
                ;;
            *)  err Help with "$_app" -h
                exit 3
                ;;
        esac
    done
}

function main() {
    declare -r _app=$(basename "${0}")
    declare -r _appDir=$(dirname "$0")
    declare -r _absoluteAppDir=$(cd "$_appDir" || exit 99 ; /bin/pwd)
    declare -r _appVersion="0.1.0"      # use semantic versioning
    declare -g configFile="./synchroniseVersions.cfg"
    export DebugFlag=${DebugFlag:-FALSE}

    exitIfBinariesNotFound pwd basename dirname mktemp version.sh
    parseCLI "$@"
    shift "$(( OPTIND - 1 ))"  # not working inside parseCLI

    exitIfPlainFilesNotExisting "$configFile"   # to be done after parseCLI

    ##### output the version information from every specified directory in $configFile
    for dir in $(grep -v '^$' < "$configFile" | grep -v '^#') ; do
        (
            if [ -d "$dir" ] ; then
                echo -n "$dir "
                cd "$dir" || exit 99
                version.sh
            else
                error "$dir" is no directory
            fi
        )
    done
    ######### ask the user for a new version for all specified prjs in $configFile
    read -r -e -p 'New common version number: ' newVersion
    ######## apply the specified new version to all prjs specified in $configFile
    for dir in $(grep -v '^$' < "$configFile" | grep -v '^#') ; do
        (
            cd "$dir" || exit 99
            bumpversion --allow-dirty --current-version "$(version.sh)" --new-version "$newVersion" major "$(version.sh -v | cut -d: -f1)"
        )
    done
}

main "$@"

# EOF
