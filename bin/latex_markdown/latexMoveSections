#!/usr/bin/env bash
# shellcheck disable=SC2155 disable=SC2046 disable=SC2001 disable=SC2086
# vim: set expandtab: ts=3: sw=3
#
# TITLE: $_app
#
# DESCRIPTION: latexMoveSections
#
# CHANGELOG: todo
# - 0.0.1:
#
# COPYRIGHT Â© 2022 Christian Engel (mailto:engel-ch@outlook.com) todo
#
# Skeleton:
#   0.5   - default option now -D by default
#   0.4.1 - repaired debug4/8/12 echoing directly, no err call deleting spaces
#   0.4.0 - debug4, debug8
#   0.3.1 - usage with information about debug option
#   0.3.0 - clean-up, local changes
#   0.2.0 - use of bash builtin GNU getopts (no support for long options)
#         - bug fix with debug's internal variable DebugFlag
#   0.1.0 - improved exitIfErr
#
# LICENSE: MIT todo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

#########################################################################################
# VARIABLES, CONSTANTS

# readonly skeleton_version=0.4.1 # variable normally not required

readonly _app="$(basename $0)"
readonly _appDir="$(dirname $0)"
readonly _appVersion="0.0.1" # use semantic versioning

#########################################################################################
# ConfigShell lib 1.1 (codebase 1.0.0)
bashLib="/opt/ConfigShell/lib/bashlib.sh"
[ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
# shellcheck source=/opt/ConfigShell/lib/bashlib.sh
source "$bashLib"
unset bashLib

# application-specific functions  ===============================================================================

function usage()
{
    err DESCRIPTION
    err
    err SYNOPSIS
    err4 "$_app" '[-D] down [ file ... ]'
    err "$_app"
    err4 "$_app" '-h'
    err4 "$_app" '[-D] up [ file ... ]'
    err
    err VERSION
    err
    err OPTIONS
    err4 "$_appVersion"
    err4 '-D      ::= enable debug output'
    err4 '-h      ::= show usage message and exit with exit code 1'
    err4 todo .......
}

function parseCLI() {
    while getopts "Dfh" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  err Debug enabled ; debugSet
                ;;
            h)  usage ; exit 1
                ;;
            *)  err Help with "$_app" -h
                exit 2  # Exit abnormally.
                ;;
        esac
    done
}

function verifyNotExistingSection() {
    # PRE: arg1 is readable file
    debug In verifyNotExistingSection "$*"
    [ -z "$2" ] && error Internal error, no search section provided. && return 30
    #debug search start for $2 by "\\$2{"
    # cat $1 | sed 's/%.*//' | grep "[\]$2{"
    #debug search end
    if [ $(sed 's/%.*//' < "$1" | grep -c "[\]$2{") -gt 0 ] ; then
        error found not expected sectioning type "$2"
        debug4 found "$2"
        return 31
    fi
    debug4 not found "$2"
    return 0
}

function verifyOneSection() {
    # PRE: arg1 is readable file
    debug In verifyOneSection "$*"
    [ -z "$2" ] && error Internal error, no search section provided. && return 35
    debug4 n\# section are: $(sed 's/%.*//' < "$1" | grep -c "[\]$2{")
    if [ $(sed 's/%.*//' < "$1" | grep -c "[\]$2{") -gt 1 ] ; then
        debug4 more than one "$2" found
        error more than one element "$2" found
        return 36
    fi
    debug4 Found "$2" not more than once
    return 0
}

function changefile() {
    # PRE: $1 source file, existing
    #      $2 destination file, existing
    sed -E "s/[\]$3{/\\\\$4{/" < "$1" > "$2"
}

function moveUp() {
    local res1
    debug up mode for file "$file"
    if [ ! -r "$file" ] ; then
        error File "$file" not existing or not readable.
        return 20
    fi
    verifyNotExistingSection "$file" title ; res1=$?    # currently, no support for part (report, book document-classes)
    [ "$res1" -ne 0 ] && return 21
    verifyOneSection "$file" section ; res1=$?         # as only 1 title must exist
    [ "$res1" -ne 0 ] && return 22
    TMP1=$(tempFile); TMP2=$(tempFile); trap 'rm -f $TMP1 $TMP2' EXIT
    changefile "$1"    "$TMP1" section          title
    debug step0 tmp file is now $(cat "$TMP1")
    changefile "$TMP1" "$TMP2" subsection       section
    debug step1 tmp file is now $(cat "$TMP2")
    changefile "$TMP2" "$TMP1" subsubsection    subsection
    debug step2 tmp file is now $(cat "$TMP1")
    changefile "$TMP1" "$TMP2" paragraph        subsubsection
    debug step3 tmp file is now $(cat "$TMP2")
    changefile "$TMP2" "$TMP1" subparagraph     paragraph
    cat "$TMP1"
}

function moveDown() {
    local res1
    debug down mode for file "$file"
    if [ ! -r "$file" ] ; then
        error File "$file" not existing or not readable.
        return 25
    fi
    verifyNotExistingSection "$file" subparagraph ; res1=$?
    [ "$res1" -ne 0 ] && return 26
    TMP1=$(tempFile); TMP2=$(tempFile); trap 'rm -f $TMP1 $TMP2' EXIT
    changefile  "$1"   "$TMP1" paragraph        subparagraph
    debug step0 tmp file is now $(cat "$TMP1")
    changefile "$TMP1" "$TMP2" subsubsection    paragraph
    debug step1 tmp file is now $(cat "$TMP2")
    changefile "$TMP2" "$TMP1" subsection       subsubsection
    debug step2 tmp file is now $(cat "$TMP1")
    changefile "$TMP1" "$TMP2" section          subsection
    debug step3 tmp file is now $(cat "$TMP2")
    changefile "$TMP2" "$TMP1" title            section
    cat "$TMP1"
}

function main() {
    exitIfBinariesNotFound pwd tput basename dirname mktemp
    parseCLI "$@"
    shift $((OPTIND - 1))  # not working inside parseCLI
    debug args are "$*"
    mode=$1 ; shift
    case $mode in
    u*|U*)  for file in "$@" ; do
                moveUp "$file"; res=$(( res + $? ))
            done
            ;;
    d*|D*)  for file in "$@" ; do
                moveDown "$file"; res=$(( res + $? ))
            done
            ;;
    *)      usage
            errorExit 10 Unknown mode "$mode"
            ;;
    esac
    return "$res"
}

main "$@"
exit "$res"

# EOF
