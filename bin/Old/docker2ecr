#!/usr/bin/env bash

[ "$1" = -n ] && dry=echo && shift && echo DRY RUN...........

### const start
readonly _docker=${DOCKER:-docker}  # renaming for podman,... possible
readonly _image=$(basename "$PWD")
readonly _version="$1"
readonly _awsVersionExtension="$2"
readonly _awsRemoteEcr=${AWS_ECR:-194034686683.dkr.ecr.eu-west-2.amazonaws.com}
readonly _architecture=${DOCKER_ARCHITECTURE:-amd64}
### const end
readonly _constStart=$(( $(grep --line-number '### const start' $0 | head -n1 | cut -d: -f1) + 1 ))
readonly _constEnd=$(( $(grep --line-number '### const end' $0 | head -n1 | cut -d: -f1) -1 ))

function errorExit() {
   local _exit=$1
   shift
   1>&2 echo "ERROR:"$*
   exit $_exit
}


function outputVars() {
    for line in $(sed -n "$_constStart,${_constEnd}p" $0) ; do
        #echo line $line
        if [ $(echo $line | grep -- = | wc -l) -eq 1 ] ; then
            match=$(echo $line | sed -E 's/^([_a-zA-Z]+)=.*/\1/')
            echo ' ' $match ${!match}
        fi
    done
}

[ -z "$1" ] && errorExit 1 'no version number defined for the new image'
[ -z "$2" ] && errorExit 1 'no AWS version number extension defined for the new image'

echo The variables are:
outputVars
read -ep 'Press ENTER if you want to build, tag, and push the image'
set -x
set -e
${dry} docker build --no-cache --platform $_architecture -t $_image:$_version .
${dry} docker tag $_image:$_version $_awsRemoteEcr/$_image:${_version}_$_awsVersionExtension
${dry} docker push $_awsRemoteEcr/$_image:${_version}_$_awsVersionExtension


