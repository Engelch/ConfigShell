#!/usr/bin/env bash
# vim: set expandtab: ts=3: sw=3
# shellcheck disable=SC2155
#
# TITLE: $_app
#
# DESCRIPTION: <see usage function below>
#
# LICENSE: MIT todo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# CHANGELOG
# 1.0.0
# - initial

#########################################################################################
# VARIABLES, CONSTANTS


#########################################################################################
# ConfigShell lib 1.1 (codebase 1.0.0)
bashLib="/opt/ConfigShell/lib/bashlib.sh"
[ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
# shellcheck source=/opt/ConfigShell/lib/bashlib.sh
source "$bashLib"
unset bashLib
#########################################################################################
# application-specific functions  ===============================================================================

function exitIfNotInGitRepo() {
    git rev-parse --show-toplevel &>/dev/null || errorExit 11 Not in a git repository
}

# main routines  ================================================================================================

function usage()
{
    err NAME
    err4 "$app"
    err
    err SYNOPSIS
    err4 "$app"
    err4 "$app" '-h | -D | -V'
    err
    err VERSION
    err4 "$appVersion"
    err
    err DESCRIPTION
    err4 edit the .gitignore file of the complete project/repository.
    err
    err OPTIONS
    err4 '-D      ::= enable debug output'
    err4 '-h      ::= show usage message and exit with exit code 1'
    err4 '-V      ::= show version information and exit with exit code 1'
}

# EXIT 1    usage
function parseCLI() {
    while getopts "Dh" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  err Debug enabled ; debugSet
                ;;
            h)  usage ; exit 1
                ;;
            *)
                err Help with "$app" -h
                exit 2  # Exit abnormally.
                ;;
        esac
    done
}

function main() {
    set -u
    exitIfBinariesNotFound pwd basename dirname mktemp realpath

    if [ "${1:-}" = -V ] || [ "${1:-}" = '--version' ] ; then
        cd "$PROFILES_CONFIG_DIR/bin/git" || { 1>&2 echo ERROR, unusual ConfigShell installation ; exit 10 ; }
        [ ! -f ./version.txt ] && { 1>&2 echo ERROR, version of git tools cannot be determined. ; exit 11 ; }
        version.sh
        exit 0
    fi

    declare -g -r app=$(basename "$0")
    declare -g -r appDir=$(dirname "$0")
    declare -g -r appVersion="1.0.0"      # use semantic versioning
    declare -g    DebugFlag="${DebugFlag:-FALSE}"

    parseCLI "$@"
    shift "$(( OPTIND - 1 ))"  # not working inside parseCLI

    debug "app $app"
    debug "appDir $appDir"
    debug "appVersion $appVersion"
    debug "DebugFlag $DebugFlag"

    exitIfNotInGitRepo
    declare -r Gitroot="$(git rev-parse --show-toplevel)"
    debug "Gitroot is $Gitroot"
    
    _edit=${EDITOR:-}
    [ -z "$_edit" ] && _edit=${VISUAL:-vi}
    debug The editor _edit is "$_edit"
    "$_edit" "$Gitroot/.gitignore"
}

main "$@"

# EOF
