#!/usr/bin/env bash
# shellcheck disable=

function usage() {
    cat << HERE
git-status-all -V
git-status-all ( -h | --help )
git-status-all [ dir ] ...

Without a directory, the commands start at your home-directory and at /opt/ConfigShell to
check the status of your git repositories. With arguments, the commands starts at the specified
directories and recursively checks for git repositories and output their status.

-V ::= output the version   and exit 1
-h ::= output help          and exit 2
HERE
}

function checkGitDir() {
    git remote update &>/dev/null
    repo="$(git rev-parse --show-toplevel | sed -E s,"$HOME",~,)"
    status="$(gitStatus)"
    echo -e "$status\033[1;31m repo: \033[1;34m$repo \033[1;0m";
    #git status -s -u --ignore-submodules --show-stash  # not showing how many commits ahead of behind
}

export -f checkGitDir       # export function to sub-processes
# alternative, POSIX compliant
# find . | while read file; do dosomething "$file"; done

if [ "$1" = -V ] || [ "$1" = '--version' ] ; then
    cd "$PROFILES_CONFIG_DIR/bin/git" || { 1>&2 echo ERROR, unusual ConfigShell installation ; exit 10 ; }
    [ ! -f ./version.txt ] && { 1>&2 echo ERROR, version of git tools cannot be determined. ; exit 11 ; }
    version.sh
    exit 0
fi

[ "$1" = "-h" ] || [ "$1" = "--help" ] && usage && exit 2


[ -n "$1" ] && find "$@" -name .git -execdir bash -c 'checkGitDir' \;
[ -z "$1" ] && find . /opt/ConfigShell/ -name .git -execdir bash -c 'checkGitDir' \;

# EOF
