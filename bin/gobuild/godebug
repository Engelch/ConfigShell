#!/usr/bin/env bash
# shellcheck disable=SC2155

# 240323
# - cleanup of script, making sure non comsumed CLI arguments are passed to the builder script
# - extended help script
# Start compilation of a go application.
# It determines the 
#   - current architecture
#   - operating system
#   - and differentiate between debug, release, and upx builds
# Then it calls the appropriate builder script like /opt/ConfigShell/bin/gobuild.debug.linux_amd64
# Options after -- or not consumed by this script here are transferred to the builder script.

#########################################################################################
# FUNCTIONS

function loadLibs() {
    #########################################################################################
    # ConfigShell lib 1.1 (codebase 1.0.0)
    bashLib="/opt/ConfigShell/lib/bashlib.sh"
    [ ! -f "$bashLib" ] && 1>&2 echo "bash-library $bashLib not found" && exit 127
    # shellcheck source=/opt/ConfigShell/lib/bashlib.sh
    source "$bashLib"
}

# EXIT 1
function parseCLI() {
    while getopts "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  1>&2 echo Debug enabled in gobuild ; DebugFlag="TRUE"
                debugVal='-D'
                ;;
            V)  /opt/ConfigShell/bin/gobuild.debug.linux_amd64 -V # the version of this script is defined by the underlying gobuild.debug.... script
                exit 0
                ;;
            h)  echo "$_app determines the current archicture and operating system and"
                echo "the build mode from the script name and then calls the appropriate"
                echo "builder script gobuild.<targetEnv>.<os>.<architecture> script like this one:"
                echo "          /opt/ConfigShell/bin/gobuild.debug.linux_amd64"
                echo
                echo "Support Options:"
                echo "  -D := debug mode. -D is also passed to the builder script."
                echo "        In debug mode you have to press enter to execute the actual builder script."
                echo "  -V := output version and exit. The version is coming from the builder script."
                echo "  -h := show this help and exit."
                echo "   * := All other supplied options are passed to the builder script."
                echo
                echo "-24: upx compressed binaries do not seem to work with darwin_arm64."
                echo
                echo "------------- help of the underlying gobuild.debug.linux_amd64 -------------------------"
                echo 
                /opt/ConfigShell/bin/gobuild.debug.linux_amd64 -h   # help is from the underlying gobuild.debug
                exit 0
                ;;
            *)  flags+=" -$options"         # store all other parameters to be passed to gobuild....
                ;;
        esac
    done
}

# EXIT 10
# EXIT 11
function main() {
    loadLibs
    flags=
    readonly _app="$(basename "$0")"    # used by parseCLI
    readonly _appDir="$(dirname "$0")"
    parseCLI "$@"                       # cannot use fn-s from loadLibs
    shift "$(( OPTIND - 1 ))"           # not working inside parseCLI
    debug Arguments not eaten by parseCLI are $flags

    _os=${GOOS:-$(uname | tr "[:upper:]" "[:lower:]")}          # determine os
    _arch=${GOARCH:-$(uname -m | tr "[:upper:]" "[:lower:]")}   # determine arc; change x86_64 to amd64
    [ "$_arch" = x86_64 ] && _arch=amd64

    case "$_app" in                     # determine env by which name this script was called
    godebug|gobd|go-build-debug)        # go build debug
        debug debug build
        env=debug
        ;;
    gorelease|gobr|go-build-release)    # go build release
        debug release build
        env=release
        ;;
    goupx|gobu|go-build-upx)            # go build upx; creating problems with darwin-arm64
        debug upx build
        env=upx
        ;;
    *) errorExit 11 "Cannot determine build environment"
        ;;
    esac
       
    ! [ -f go.mod ] && echo 1>&2 "go.mod not found. Wrong directory?" && exit 10

    debug OS is "$_os"
    debug Architecture is "$_arch"
    debug Environment is "$env"

    echo Calling "/opt/ConfigShell/bin/gobuild.${env}.${_os}_${_arch}" $debugVal $flags
    debug Press ENTER to continue or ctrl-C to exit.
    debugExecIfDebug read
    "/opt/ConfigShell/bin/gobuild.${env}.${_os}_${_arch}" $debugVal $flags
}

main "$@" 

# EOF
