#!/usr/bin/env bash
# shellcheck disable=SC2155

readonly _app=$(basename "$0")
readonly _appDir=$(dirname "$0")
readonly _absoluteAppDir=$(cd "$_appDir" || errorExit 1 cannot determine absolute path of app_dir; /bin/pwd)
readonly _appVersion="2.0.0" # use semantic versioning
export DebugFlag=${DebugFlag:-FALSE}

#########################################################################################

# --- debug: Conditional debugging. All commands begin w/ debug.

function debugSet()             { DebugFlag=TRUE; return 0; }
function debugUnset()           { DebugFlag=; return 0; }
function debug()                { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:'"$*" 1>&2 ; return 0; }
function debug4()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:    ' "$*" 1>&2 ; return 0; }
function debug8()               { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:        ' "$*" 1>&2 ; return 0; }
function debug12()              { [ "$DebugFlag" = TRUE ] && echo 'DEBUG:            ' "$*" 1>&2 ; return 0; }

# --- Exits

# function error()        { err 'ERROR:' $*; return 0; } # similar to err but with ERROR prefix and possibility to include
# Write an error message to stderr. We cannot use err here as the spaces would be removed.
function error()        { echo 'ERROR:'"$*" 1>&2;             return 0; }
function error4()       { echo 'ERROR:    '"$*" 1>&2;         return 0; }
function error8()       { echo 'ERROR:        '"$*" 1>&2;     return 0; }
function error12()      { echo 'ERROR:            '"$*" 1>&2; return 0; }

function errorExit()    { EXITCODE="$1" ; shift; error "$*" ; exit "$EXITCODE"; }
function exitIfErr()    { a="$1"; b="$2"; shift; shift; [ "$a" -ne 0 ] && errorExit "$b" App returned "$a $*"; }

function err()          { echo "$*" 1>&2; }                 # just write to stderr
function err4()         { echo '   ' "$*" 1>&2; }           # just write to stderr
function err8()         { echo '       ' "$*" 1>&2; }       # just write to stderr
function err12()        { echo '           ' "$*" 1>&2; }   # just write to stderr

# --- Existance checks
function exitIfBinariesNotFound()       { for file in "$@"; do command -v "$file" &>/dev/null || errorExit 253 binary not found: "$file"; done }
function exitIfPlainFilesNotExisting()  { for file in "$@"; do [ ! -f "$file" ] && errorExit 254 'plain file not found:'"$file" 1>&2; done }
function exitIfFilesNotExisting()       { for file in "$@"; do [ ! -e "$file" ] && errorExit 255 'file not found:'"$file" 1>&2; done }
function exitIfDirsNotExisting()        { for dir in "$@"; do [ ! -d "$dir" ] && errorExit 252 "$APP:ERROR:directory not found:$dir"; done }

# --- Temporary file/directory  creation
# -- file creation -- TMP1=$(tempFile); TMP2=$(tempFile) ;;;; trap "rm -f $TMP1 $TMP2" EXIT
# -- directory creation -- TMPDIR=$(tempDir) ;;;;;  trap "rm -fr $TMPDIR;" EXIT
#
function tempFile()                     { mktemp "${TMPDIR:-/tmp/}$_app.XXXXXXXX"; }
function tempDir()                      { mktemp -d "${TMPDIR:-/tmp/}$_app.YYYYYYYYY"; }
# realpath as shell, argument either supplied as stdin or as $1

#########################################################################################

function usage()
{
    err DESCRIPTION
    err4 'Encrypt and decrypt files using gpg. Note: please do not use this command'
    err4 'in multi-user environments as the passwords could be read from the'
    err4 'process table.'
    err
    err SYNOPSIS
    err4 "$_app" '[-D] [-f] [-k] [-d] [file...]'
    err4 "$_app" '-h'
    err
    err VERSION
    err4 "$_appVersion"
    err
    err OPTIONS
    err4 '-D      ::= enable debug output'
    err4 '-k      ::= keep the original file'
    err4 '-d      ::= decrypt instead of encrypt'
    err4 '-f      ::= force mode. Overwrite existing destination'
    err4 '-h      ::= show usage message and exit with exit code 1'
}

function parseCLI() {
    declare -g command=sencrypt2
    declare -g KEEP=
    while getopts "dDfhk" options; do         # Loop: Get the next option;
        case "${options}" in                    # TIMES=${OPTARG}
            D)  err Debug enabled ; debugSet
                ;;
            d) # decrypt mode  
                debug decrypt mode selected
                command="sdecrypt"
                ;;
            f)  debug forcedMode; forcedMode=-f
                ;;
            h)  usage ; exit 1
                ;;
            k) # keep mode
                debug keep mode selected
                KEEP=-k
                ;;
            *)
                err Help with "$_app" -h
                exit 2  # Exit abnormally.
                ;;
        esac
    done
}


# This version only asks once for the pw for multiple files. This can be risky in multi-user environments as the passphrase is readable in
# the process table. But, it can help to save a lot of typing :-)
function sencrypt2() {
   local file
   local keep=
   local force=
   local pw=
   local pw2
   [ "$1" = -f ] && force=True && shift
   [ "$1" = -k ] && keep=True && shift
   [ "$1" = -f ] && force=True && shift # all 4 forms (1) -f -k (2) -k -f (3) -kf (4) -fk
   [ "$1" = -kf ] || [ "$1" = -fk ] && keep=True && force=True && shift
   read -esrp "Enter passphrase:" pw
   read -esrp "Enter passphrase again:" pw2
   [ "$pw" != "$pw2" ] && error passwords differ && exit 1
   for file in "$@" ; do
        debug working on file "$file"
        [ -z "$file" ] && debug fix empty entry && continue
      [ -n "$force" ] && debug forced mode && /bin/rm -f "$file.asc" 2>/dev/null
      [ -f "$file.asc" ] && error target file already exists for "$file". && continue
      echo "$pw" | gpg -c --passphrase-fd 0 --armor --batch --yes -o "$file.asc" "$file" && \
        [ -z "$keep" ] && [ -f "$file" ] && debug deleting original file && /bin/rm -f "$file"
   done
}

function sdecrypt() {
   local file
   local force=
   local keep=
   local target
   [ "$1" = -f ] && force=True && shift
   [ "$1" = -k ] && keep=True && shift
   [ "$1" = -f ] && force=True && shift # all 4 forms (1) -f -k (2) -k -f (3) -kf (4) -fk
   [ "$1" = -kf ] || [ "$1" = -fk ] && keep=True && force=True && shift
   for file in "$@" ; do
        [ -z "$file" ] && debug fix empty entry && continue
      target=$(basename "$file" .asc)
      [ -n "$force" ] && /bin/rm -f "$target" 2>/dev/null
      [ -f "$target" ] && error target file already exists for "$file". && continue
      debug gpg -d -o "$target" "$file"
      gpg -d -o "$target" "$file" && [ -z "$keep" ] && /bin/rm -f "$file"
   done
}

function main() {
    exitIfBinariesNotFound pwd basename dirname mktemp gpg
    parseCLI "$@"
    shift $(( OPTIND - 1 ))  # not working inside parseCLI
    debug args are "$*"
    debug forcedMode is "${forcedMode}"
    debug keepMode is "$KEEP"
    debug command is "$command"
    "$command" "$KEEP" "$forcedMode" "$@"
}

main "$@"

# EOF

